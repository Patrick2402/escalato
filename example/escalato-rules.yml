rules:
  - name: "Wildcard in AssumeRole Trust Policy"
    description: "Role has a trusted policy with sts:AssumeRole and wildcard principal"
    severity: CRITICAL
    type: ROLE_TRUST_POLICY
    condition:
      service: "sts"
      action: "AssumeRole"
      principal_wildcard: true

  # ___________________________________________
  # Add something to notify that it required human verification... 
  # ___________________________________________
  # - name: "Config in AssumeRole Trust Policy"
  #   description: "Role has a trusted policy with sts:AssumeRole  without condition... "
  #   severity: CRITICAL
  #   type: ROLE_TRUST_POLICY
  #   condition:
  #     service: "sts"
  #     action: "AssumeRole"
  #     condition: -> not_exists and principal_wildcard: (not on list)
      # exclude_patterns_list:
      #   - "config.amazonaws.com"


  - name: "High Privilege Role"
    description: "Role or user has administrator access"
    severity: HIGH
    type: ROLE_PERMISSIONS
    condition:
      service: "iam"
      action: "*"
      exclude_patterns:
        - "ReadOnly"
        - "ViewOnly"
        - "AWSServiceRole"
        - "aws-service-role/support.amazonaws.com/AWSServiceRoleForSupport"

  - name: "Full S3 Access"
    description: "Role or user has full access to S3 buckets"
    severity: HIGH
    type: ROLE_PERMISSIONS
    condition:
      service: "s3"
      action: "*"
      exclude_patterns:
        - "ReadOnly"
        - "ViewOnly"
        - "AWSLambdaVPCAccessExecutionRole"
        - "AWSLambdaBasicExecutionRole"
        - "AWSLambdaS3ExecutionRole"
        - "AWSServiceRoleForTrustedAdvisor"
        - "AWSServiceRoleForSupport"
        - "AWSServiceRoleForAmazonMacie"
        - "aws-service-role/support.amazonaws.com/AWSServiceRoleForSupport"
# Can we check if s3 bucket is public? 
# SEC #2 RULE
# Another rule... Checking Read... for all Principals --> Confidence Low, 
#
#
# SAME scenario for all services... read access... confidence low -> severity choose
  - name: "Full RDS Access"
    description: "Role or user has full access to RDS"
    severity: HIGH
    type: ROLE_PERMISSIONS
    condition:
      service: "rds"
      action: "*"
      exclude_patterns:
        - "ReadOnly"
        - "ViewOnly"
        - "AWSLambdaVPCAccessExecutionRole"
        - "AWSLambdaBasicExecutionRole"
        - "AWSLambdaS3ExecutionRole"
        - "AWSServiceRoleForTrustedAdvisor"
        - "AWSServiceRoleForSupport"
        - "aws-service-role/support.amazonaws.com/AWSServiceRoleForSupport"

  - name: "Outdated Access Key"
    description: "User has access key older than 180 days"
    severity: HIGH
    type: USER_ACCESS_KEY
    condition:
      key_age: 180

  - name: "Inactive Access Key"
    description: "User has inactive access key"
    severity: LOW
    type: USER_ACCESS_KEY
    condition:
      key_status: "Inactive"

# Try make template for this ;)) list of the services
  # - name: "{service.name} Full Access for Users"
  #   description: "User has full access to EC2 instances"
  #   severity: HIGH
  #   type: USER_PERMISSIONS
  #   condition:
  #     service: ["ec2", "s3"] 
  #     action: "*"
  #     exclude_patterns:
  #       - "ReadOnly"
  #       - "ViewOnly"
  #       - "AWSServiceRole"

  - name: "Admin Policy Attached"
    description: "Role or user has the AdministratorAccess policy attached"
    severity: CRITICAL
    type: ROLE_PERMISSIONS
    condition:
      managed_policy: "AdministratorAccess"

# make it low confidence...
  - name: "Cross Account Access" 
    description: "Role allows cross-account access"
    severity: HIGH
    type: ROLE_TRUST_POLICY
    condition:   
      service: "iam"
      principal_wildcard: false

  - name: "Lambda Full Access"
    description: "Role or user has full access to Lambda functions"
    severity: MEDIUM
    type: ROLE_PERMISSIONS
    condition:
      service: "lambda"
      action: "*"
      exclude_patterns:
        - "ReadOnly"
        - "ViewOnly"
        - "AWSLambdaVPCAccessExecutionRole"
        - "AWSLambdaBasicExecutionRole"
        - "AWSLambdaS3ExecutionRole"
        - "AWSServiceRoleForTrustedAdvisor"
        - "AWSServiceRoleForSupport"
        - "AWSServiceRoleForAmazonMacie"

  - name: "iam:ListAccessKeys Check Test"
    description: "IAM "
    severity: LOW
    type: ROLE_PERMISSIONS
    condition:
      service: "iam"
      action: "ListAccessKeys"
      exclude_patterns:
        - "ReadOnly"
        - "ViewOnly"
        - "AWSLambdaVPCAccessExecutionRole"
        - "AWSLambdaBasicExecutionRole"
        - "AWSLambdaS3ExecutionRole"
        - "AWSServiceRoleForTrustedAdvisor"
        - "AWSServiceRoleForSupport"
        - "AWSServiceRoleForAmazonMacie"

# whatever is ROOT... make it medium, think 