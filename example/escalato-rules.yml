# # Escalato Security Rules
# # This file defines security rules for AWS IAM configurations using the new flexible rule engine
excluded_roles:
  - Rackspace
  - AWSReservedSSO_541889288027-ops-power-user_0d72a2b30c281563
  - AWSReservedSSO_541889288027-AdministratorAccess_7d829ee48b5506a1
excluded_users:
  - example-user

rules:
#   - id: pass_role_permissions
#     name: "PassRole Permissions"
#     description: "Role has permissions to pass roles to other AWS services"
#     severity: HIGH
#     resource_type: Role
#     conditions:
#       - type: ALL_POLICIES
#         match:
#           statement_effect: "Allow"
#           action: "iam:PassRole"
#           # resource: "*"
#     confidence_rules:
#     - level: HIGH
#       when: "has_global_wildcard"
#     - level: MEDIUM
#       when: "has_leading_or_trailing_wildcard"
#     - level: LOW
#       when: "has_wildcard_resource"
#     - level: LOW
#       default: true



#   - id: admin_permissions
#     name: "Administrative IAM Permissions"
#     description: "Resource has administrative access to IAM"
#     severity: HIGH
#     resource_type: Role
#     conditions:
#       - type: OR
#         conditions:
#           - type: ALL_POLICIES
#             match:
#               statement_effect: "Allow"
#               service: "iam"
#               action: "*"
#     confidence_rules:
#       - level: HIGH
#         when: "has_wildcard_resource"
#       - level: MEDIUM
#         when: "non_read_only_count > 5"
#       - level: LOW
#         default: true

#   - id: outdated_access_key
#     name: "Outdated Access Key"
#     description: "User has access key older than 180 days"
#     severity: HIGH
#     resource_type: User
#     conditions:
#       - type: AGE_CONDITION
#         property_path: "AccessKeys[0].CreateDate"
#         threshold: 180
#     confidence_rules:
#       - level: HIGH
#         when: "ageInDays > 365"
#       - level: MEDIUM
#         when: "ageInDays > 270"
#       - level: LOW
#         default: true

#   - id: secrets_manager_access
#     name: "Secrets Manager GetSecretValue Access"
#     description: "Resource has access to get secret values from AWS Secrets Manager"
#     severity: HIGH
#     resource_type: Role
#     conditions:
#       - type: ALL_POLICIES
#         match:
#           statement_effect: "Allow"
#           service: "secretsmanager"
#           action: "secretsmanager:GetSecretValue"
#     confidence_rules:
#       - level: HIGH
#         when: "has_wildcard_resource && non_read_only_count > 3"
#       - level: MEDIUM
#         when: "has_wildcard_resource"
#       - level: LOW
#         default: true

# - id: inactive_user
#   name: "Inactive User"
#   description: "User has not been active in the last 90 days"
#   severity: MEDIUM
#   resource_type: User
#   conditions:
#     - type: OR
#       conditions:
#         - type: RESOURCE_PROPERTY
#           property_path: "LastUsed"
#           value: null
#         - type: AGE_CONDITION
#           property_path: "AccessKeys[0].LastUsed.Date"
#           threshold: 90
#   confidence_rules:
#     - level: HIGH
#       when: "LastUsed == null"
#     - level: MEDIUM
#       when: "ageInDays > 180"
#     - level: LOW
#       default: true

  # - id: assume_role_no_condition
  #   name: "AssumeRole Without Conditions"
  #   description: "Role has a trusted policy with sts:AssumeRole without required conditions"
  #   severity: CRITICAL
  #   resource_type: Role
  #   conditions:
  #     - type: POLICY_DOCUMENT
  #       document_path: "TrustPolicy"
  #       match:
  #         statement_effect: "Allow"
  #         action: "sts:AssumeRole"
  #         has_condition: false
  #     - type: NOT
  #       conditions:
  #         - type: PATTERN_MATCH
  #           property_path: "TrustPolicy"
  #           pattern: "(lambda|ec2|cloudformation|eks|firehose|ecs-tasks|s3|scheduler|events)\\.amazonaws\\.com"
  #           options:
  #             type: "regex"
  #   confidence_rules:
  #     - level: HIGH
  #       when: "has_wildcard_principal"
  #     - level: MEDIUM
  #       when: "!has_wildcard_principal && principal_count > 0"
  #     - level: LOW
  #       default: true

# ## VERIFIED but this probably will not happened 
# - id: wildcard_assume_role
#   name: "Wildcard in AssumeRole Trust Policy"
#   description: "Role has a trusted policy with sts:AssumeRole and wildcard principal"
#   severity: CRITICAL
#   resource_type: Role
#   conditions:
#     - type: POLICY_DOCUMENT
#       document_path: "TrustPolicy"
#       match:
#         statement_effect: "Allow"
#         action: "sts:AssumeRole"
#         principal:
#           has_wildcard: true
#   confidence_rules:
#     - level: HIGH
#       when: "has_wildcard_principal && !has_conditions"
#     - level: MEDIUM
#       when: "has_wildcard_principal && has_conditions"
#     - level: LOW
#       default: true


# # Working well
# - id: cross_account_access
#   name: "Cross Account Access"
#   description: "Role allows cross-account access from external AWS accounts"
#   severity: HIGH
#   resource_type: Role
#   conditions:
#     - type: POLICY_DOCUMENT
#       document_path: "TrustPolicy"
#       match:
#         statement_effect: "Allow"
#         action: "sts:AssumeRole"
#     - type: NOT
#       conditions:
#         - type: OR
#           conditions:
#             - type: PATTERN_MATCH
#               property_path: "TrustPolicy"
#               pattern: "amazonaws.com"
#               options:
#                 type: "contains"
#             - type: PATTERN_MATCH
#               property_path: "TrustPolicy"
#               pattern: "arn:aws:iam::541889288027:root"
#               options:
#                 type: "contains"
#   confidence_rules:
#     - level: HIGH
#       when: "has_wildcard_principal"
#     - level: MEDIUM
#       when: "!has_conditions"
#     - level: LOW
#       default: true


# - id: kms_decrypt_access
#   name: "KMS Key Decryption Access"
#   description: "Role has permissions to decrypt KMS keys"
#   severity: HIGH
#   resource_type: Role
#   conditions:
#     - type: ALL_POLICIES
#       match:
#         statement_effect: "Allow"
#         service: "kms"
#         action: "kms:Decrypt"
#   confidence_rules:
#     - level: HIGH
#       when: "has_wildcard_resource"
#     - level: MEDIUM
#       default: true

# - id: s3_wildcard_access
#   name: "S3 Wildcard Access"
#   description: "Role has wildcard access to S3 buckets"
#   severity: HIGH
#   resource_type: Role
#   conditions:
#     - type: ALL_POLICIES
#       match:
#         statement_effect: "Allow"
#         action: "s3:*"
#   confidence_rules:
#     - level: HIGH
#       when: "has_wildcard_resource"
#     - level: MEDIUM
#       default: true

# - id: iam_wildcard_access
#   name: "IAM Wildcard Access"
#   description: "Role has wildcard access to iam resources"
#   severity: CRITICAL
#   resource_type: Role
#   conditions:
#     - type: ALL_POLICIES
#       match:
#         statement_effect: "Allow"
#         action: "iam:*"
#   confidence_rules:
#     - level: HIGH
#       when: "has_wildcard_resource"
#     - level: MEDIUM
#       default: true

# - id: lambda_wildcard_access
#   name: "Lambda Wildcard Access"
#   description: "Role has wildcard access to Lambda Functions"
#   severity: HIGH
#   resource_type: Role
#   conditions:
#     - type: ALL_POLICIES
#       match:
#         statement_effect: "Allow"
#         action: "lambda:*"
#   confidence_rules:
#     - level: HIGH
#       when: "has_wildcard_resource"
#     - level: MEDIUM
#       default: true

# - id: ec2_wildcard_access
#   name: "EC2 Wildcard Access"
#   description: "Role has wildcard access to EC2 instances"
#   severity: HIGH
#   resource_type: Role
#   conditions:
#     - type: ALL_POLICIES
#       match:
#         statement_effect: "Allow"
#         action: "ec2:*"
#         resource: "*"
#   confidence_rules:
#     - level: HIGH
#       when: "has_wildcard_resource"
#     - level: MEDIUM
#       default: true

# - id: dynamodb_wildcard_access
#   name: "DynamoDB Wildcard Access"
#   description: "Role has wildcard access to DynamoDB tables"
#   severity: HIGH
#   resource_type: Role
#   conditions:
#     - type: ALL_POLICIES
#       match:
#         statement_effect: "Allow"
#         action: "dynamodb:*"
#         resource: "*"
#   confidence_rules:
#     - level: HIGH
#       when: "has_wildcard_resource"
#     - level: MEDIUM
#       default: true

# - id: admin_wildcard_access
#   name: "Admin Wildcard Access"
#   description: "Role has dangerous global wildcard permissions"
#   severity: CRITICAL
#   resource_type: Role
#   conditions:
#     - type: ALL_POLICIES
#       match:
#         statement_effect: "Allow"
#         action: "*"
#         resource: "*"
#   confidence_rules:
#     - level: HIGH
#       default: true


# - id: sts_assumeRole_wildcards
#   name: "AssumeRole With Wildcards"
#   description: "Role allows sts:AssumeRole with wildcard resources"
#   severity: HIGH
#   resource_type: Role
#   conditions:
#     - type: ALL_POLICIES
#       match:
#         statement_effect: "Allow"
#         action: "sts:AssumeRole"
#   confidence_rules:
#     - level: HIGH
#       when: "has_global_wildcard"
#     - level: MEDIUM
#       when: "has_leading_or_trailing_wildcard"
#     - level: LOW
#       when: "has_wildcard_resource"
#     - level: LOW
#       default: true


# - id: unused_role_permissions
#   name: "Unused Role Permissions"
#   description: "Role has permissions that haven't been used in the last 90 days"
#   severity: MEDIUM
#   resource_type: Role
#   conditions:
#     - type: UNUSED_PERMISSIONS
#       threshold: 90  
#   confidence_rules:
#     - level: HIGH
#       when: "days_inactive > 180"
#     - level: MEDIUM
#       when: "days_inactive > 90"
#     - level: LOW
#       default: true

# - id: sensitive_s3_actions
#   name: "Sensitive S3 Actions"
#   description: "Role has permissions to perform sensitive S3 operations"
#   severity: HIGH
#   resource_type: Role
#   conditions:
#     - type: ALL_POLICIES 
#       match:
#         statement_effect: "Allow"
#         action_regex: "s3:PutObject"
#         resource: "*"
#   confidence_rules:
#     - level: HIGH
#       when: "has_global_wildcard"
#     - level: MEDIUM
#       when: "has_leading_or_trailing_wildcard"
#     - level: LOW
#       when: "has_wildcard_resource"
#     - level: LOW
#       default: true

# TO DO CHECK
# - id: eventbridge_invoke_risk
#   name: "EventBridge Invoke Risk"
#   description: "Role can invoke arbitrary targets via EventBridge, potentially enabling privilege escalation"
#   severity: HIGH
#   resource_type: Role
#   conditions:
#     - type: ALL_POLICIES
#       match:
#         statement_effect: "Allow"
#         action: "events:PutTargets"
#         resource: "*"
#   confidence_rules:
#     - level: HIGH
#       when: "has_global_wildcard"
#     - level: MEDIUM
#       default: true


# - id: cloudtrail_modification
#   name: "CloudTrail Modification Risk"
#   description: "Role can modify CloudTrail configurations which may affect logging and auditing"
#   severity: CRITICAL
#   resource_type: Role
#   conditions:
#     - type: ALL_POLICIES
#       match:
#         statement_effect: "Allow"
#         action_regex: "cloudtrail:(StopLogging|DeleteTrail|UpdateTrail|PutEventSelectors)"
#   confidence_rules:
#     - level: HIGH
#       when: "has_wildcard_resource"
#     - level: MEDIUM
#       default: true


# - id: lambda_permissions_risk
#   name: "Lambda Function Permissions Risk"
#   description: "Role can update Lambda function code, which can be used for privilege escalation"
#   severity: HIGH
#   resource_type: Role
#   conditions:
#     - type: ALL_POLICIES
#       match:
#         statement_effect: "Allow"
#         action_regex: "lambda:(UpdateFunctionCode|CreateFunction)"
#         resource: "*"
#   confidence_rules:
#     - level: HIGH
#       when: "has_global_wildcard"
#     - level: MEDIUM
#       when: "has_wildcard_resource"
#     - level: LOW
#       default: true


# - id: backdoor_risk
#   name: "Potential Backdoor Risk"
#   description: "Role has permissions to create persistent access mechanisms"
#   severity: CRITICAL
#   resource_type: Role
#   conditions:
#     - type: ALL_POLICIES
#       match:
#         statement_effect: "Allow"
#         action_regex: "(iam:CreateUser|iam:CreateAccessKey|iam:CreateLoginProfile|iam:UpdateLoginProfile)"
#   confidence_rules:
#     - level: HIGH
#       when: "has_wildcard_resource"
#     - level: MEDIUM
#       default: true


# - id: iam_privilege_escalation_path
#   name: "IAM Privilege Escalation Path"
#   description: "Role has permissions that enable classic privilege escalation patterns through IAM"
#   severity: CRITICAL
#   resource_type: Role
#   conditions:
#     - type: AND
#       conditions:
#         - type: OR
#           conditions:
#             - type: ALL_POLICIES
#               match:
#                 statement_effect: "Allow"
#                 action_regex: "iam:(Create|Put|Update|Attach).*Policy.*"
#             - type: ALL_POLICIES
#               match:
#                 statement_effect: "Allow"
#                 action_regex: "iam:(Create|Update)Role"
#             - type: ALL_POLICIES
#               match:
#                 action: "iam:UpdateAssumeRolePolicy"
#         - type: ALL_POLICIES
#           match:
#             statement_effect: "Allow"
#             action: "sts:AssumeRole"
#   confidence_rules:
#     - level: HIGH
#       when: "has_wildcard_resource && non_read_only_count > 3"
#     - level: MEDIUM
#       when: "has_wildcard_resource"
#     - level: LOW
#       default: true




# - id: ec2_instance_takeover
#   name: "EC2 Instance Control for Metadata Credentials"
#   description: "Role can control EC2 instances and potentially access instance profiles for credential theft"
#   severity: CRITICAL
#   resource_type: Role
#   conditions:
#     - type: AND
#       conditions:
#         - type: OR
#           conditions:
#             - type: ALL_POLICIES
#               match:
#                 action_regex: "ec2:(Get|Send).*Console.*"
#             - type: ALL_POLICIES
#               match:
#                 action: "ssm:SendCommand"
#             - type: ALL_POLICIES
#               match:
#                 action: "ec2:RunCommand"
#             - type: ALL_POLICIES
#               match:
#                 action_regex: "ec2:.*UserData"
#         - type: ALL_POLICIES
#           match:
#             action_regex: "(iam:PassRole|ec2:AssociateIamInstanceProfile)"
#   confidence_rules:
#     - level: HIGH
#       when: "has_wildcard_resource"
#     - level: MEDIUM
#       default: true




# - id: lambda_passrole_escalation
#   name: "Lambda Pass Role Privilege Escalation"
#   description: "Role can create Lambda functions with custom execution roles, enabling privilege escalation"
#   severity: CRITICAL
#   resource_type: Role
#   conditions:
#     - type: AND
#       conditions:
#         - type: ALL_POLICIES
#           match:
#             statement_effect: "Allow"
#             action_regex: "lambda:(CreateFunction|UpdateFunctionCode|UpdateFunctionConfiguration)"
#         - type: ALL_POLICIES
#           match:
#             statement_effect: "Allow"
#             action: "iam:PassRole"
#         - type: OR
#           conditions:
#             - type: ALL_POLICIES
#               match:
#                 action: "lambda:InvokeFunction"
#             - type: ALL_POLICIES
#               match:
#                 action_regex: "lambda:.*EventSourceMapping"
#             - type: ALL_POLICIES
#               match:
#                 action_regex: "events:Put.*"
#   confidence_rules:
#     - level: HIGH
#       when: "has_wildcard_resource"
#     - level: MEDIUM
#       default: true



# - id: cloudformation_privilege_escalation
#   name: "CloudFormation Privilege Escalation"
#   description: "Role can deploy arbitrary CloudFormation templates with custom service roles"
#   severity: CRITICAL
#   resource_type: Role
#   conditions:
#     - type: AND
#       conditions:
#         - type: ALL_POLICIES
#           match:
#             statement_effect: "Allow"
#             action_regex: "cloudformation:(Create|Update)Stack"
#         - type: ALL_POLICIES
#           match:
#             statement_effect: "Allow"
#             action: "iam:PassRole"
#         - type: OR
#           conditions:
#             - type: ALL_POLICIES
#               match:
#                 resource: "*"
#             - type: ALL_POLICIES
#               match:
#                 resource_regex: "arn:aws:iam:.*:role/.*"
#   confidence_rules:
#     - level: HIGH
#       when: "has_wildcard_resource"
#     - level: MEDIUM
#       default: true


- id: logging_reconfiguration_escalation
  name: "Logging Reconfiguration for Privilege Escalation"
  description: "Role can modify logging configurations to hide malicious activity during privilege escalation"
  severity: CRITICAL
  resource_type: Role
  conditions:
    - type: AND
      conditions:
        - type: OR
          conditions:
            - type: ALL_POLICIES
              match:
                action_regex: "cloudtrail:(Stop|Delete|Update)Trail"
            - type: ALL_POLICIES
              match:
                action_regex: "logs:(Delete|Disable).*"
            - type: ALL_POLICIES
              match:
                action_regex: "cloudwatch:(Delete|Disable).*"
        - type: OR
          conditions:
            - type: ALL_POLICIES
              match:
                action_regex: "(ec2|lambda|iam|dynamodb|s3):.*"
            - type: ALL_POLICIES
              match:
                action: "*"
  confidence_rules:
    - level: HIGH
      when: "has_global_wildcard"
    - level: MEDIUM
      when: "has_wildcard_resource"
    - level: LOW
      default: true



# - id: api_gateway_lambda_escalation
#   name: "API Gateway Lambda Privilege Escalation Chain"
#   description: "Role can modify API Gateway configurations and Lambda functions enabling privilege escalation"
#   severity: HIGH
#   resource_type: Role
#   conditions:
#     - type: AND
#       conditions:
#         - type: ALL_POLICIES
#           match:
#             action_regex: "apigateway:(PUT|POST|PATCH)"
#         - type: ALL_POLICIES
#           match:
#             action_regex: "lambda:(Create|Update)Function"
#         - type: ALL_POLICIES
#           match:
#             action: "iam:PassRole"
#         - type: OR
#           conditions:
#             - type: ALL_POLICIES
#               match:
#                 action: "lambda:InvokeFunction"
#             - type: ALL_POLICIES
#               match:
#                 action: "execute-api:Invoke"
#   confidence_rules:
#     - level: HIGH
#       when: "has_wildcard_resource && non_read_only_count > 5"
#     - level: MEDIUM
#       when: "has_wildcard_resource"
#     - level: LOW
#       default: true