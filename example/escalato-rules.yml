rules:
  - name: "Wildcard in AssumeRole Trust Policy"
    description: "Role has a trusted policy with sts:AssumeRole and wildcard principal"
    severity: CRITICAL
    type: ROLE_TRUST_POLICY
    condition:
      service: "sts"
      action: "AssumeRole"
      principal_wildcard: true

  - name: "AssumeRole Without Conditions"
    description: "Role has a trusted policy with sts:AssumeRole without conditions"
    severity: CRITICAL
    type: ROLE_TRUST_POLICY
    condition:
      service: "*"
      action: sts:AssumeRole
      require_conditions: true
      exclude_principals:
        - "config.amazonaws.com"
        - "lambda.amazonaws.com"
        - "ec2.amazonaws.com"
        - "events.amazonaws.com"
        - "s3.amazonaws.com"
        - "cloudtrail.amazonaws.com"
        - "support.amazonaws.com"
        - "firehose.amazonaws.com"
        - "eks.amazonaws.com"
        - "ecs-tasks.amazonaws.com"


  - name: "High Privilege Role"
    description: "Role or user has administrator access"
    severity: HIGH
    type: ROLE_PERMISSIONS
    condition:
      service: "iam"
      action: "*"
      exclude_patterns:
        - "ReadOnly"
        - "ViewOnly"
        - "AWSServiceRole"
        - "aws-service-role/support.amazonaws.com/AWSServiceRoleForSupport"

# Can we check if s3 bucket is public? 
# SEC #2 RULE
# Another rule... Checking Read... for all Principals --> Confidence Low, 
#
#
# SAME scenario for all services... read access... confidence low -> severity choose


  - name: "Outdated Access Key"
    description: "User has access key older than 180 days"
    severity: HIGH
    type: USER_ACCESS_KEY
    condition:
      key_age: 180

  - name: "Inactive Access Key"
    description: "User has inactive access key"
    severity: LOW
    type: USER_ACCESS_KEY
    condition:
      key_status: "Inactive"

  - name: "Full Service Access"
    description: "Role or user has full access to critical services"
    severity: HIGH
    type: ROLE_PERMISSIONS
    condition:
      service: ["lambda", "s3", "dynamodb", "rds", "ec2"]
      action: "*"
      exclude_patterns:
        - "ReadOnly"
        - "ViewOnly"
        - "AWSLambdaVPCAccessExecutionRole"
        - "AWSLambdaBasicExecutionRole"
        - "AWSLambdaS3ExecutionRole"
        - "AWSServiceRoleForTrustedAdvisor"
        - "AWSServiceRoleForSupport"
        - "AWSServiceRoleForAmazonMacie"

  - name: "Admin Policy Attached"
    description: "Role or user has the AdministratorAccess policy attached"
    severity: CRITICAL
    type: ROLE_PERMISSIONS
    condition:
      managed_policy: "AdministratorAccess"

  - name: "Cross Account Access" 
    description: "Role allows cross-account access"
    severity: HIGH
    type: ROLE_TRUST_POLICY
    condition:   
      aws_principal: true
      action: "sts:AssumeRole"
      exclude_principals:
        - "arn:aws:iam::aws:"
